hydra:
  run:
    dir: outputs/${out_name}/${run_type}/${model}/${now:%Y-%m-%d_%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}.py - train or evaluate specified models according
      to config.
    header: '${hydra.help.app_name}

      '
    footer: 'Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '%(asctime)s %(name)s: %(message)s'
        datefmt: '%Y/%m/%d %H:%M:%S'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: ${log_lvl}
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: RUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=RUN
    task:
    - env=cvrp200_exp
    - number_runs=3
    - test_cfg.save_for_analysis=True
    - graph_size=200
    - test_cfg.dataset_size=128
    - test_cfg.time_limit=480
    - test_cfg.add_ls=True
    - test_cfg.ls_policy_cfg.batch_size=8
  job:
    name: run_POMO
    chdir: null
    override_dirname: env=cvrp200_exp,graph_size=200,number_runs=3,test_cfg.add_ls=True,test_cfg.dataset_size=128,test_cfg.ls_policy_cfg.batch_size=8,test_cfg.save_for_analysis=True,test_cfg.time_limit=480
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.1'
    cwd: /home/thyssens/RA/routing-arena
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/thyssens/RA/routing-arena/models/POMO/config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: /home/thyssens/RA/routing-arena/outputs/cvrp_200_explosion/val/POMO/2024-08-26_19-11-45
    choices:
      meta: run
      model: pomo
      env: cvrp200_exp
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: simple
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
